///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов работы с командами приложения
//
// В большинстве проектов изменять данный модуль не требуется
//
///////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать cmdline

///////////////////////////////////////////////////////////////////

Перем Лог Экспорт;

Перем ПарсерКоманд;
Перем ИсполнителиКоманд;
Перем ОбъектНастроек;
Перем ДополнительныеПараметры;
	
///////////////////////////////////////////////////////////////////
	
//	Инициализирует и настраивает приложение
// 
// Параметры:
//	Настройка - Модуль - Модуль, в котором определены настройки приложения
//
// Возвращаемое значение:
//   Модуль   - Модуль менеджера приложения
//
Функция Инициализировать(Знач Настройки) Экспорт
	
	// Служебные переменные
	ПарсерКоманд = Новый ПарсерАргументовКоманднойСтроки();
	ИсполнителиКоманд = Новый Соответствие;	
	ОбъектНастроек = Настройки;
	ДополнительныеПараметры = Новый Структура;

	// Логирование
	Лог = Логирование.ПолучитьЛог(ОбъектНастроек.ИмяЛогаСистемы());
	Лог.УстановитьУровень(УровниЛога.Информация);
	Лог.УстановитьРаскладку(ОбъектНастроек);

	// Инициализация команд
	ОбъектНастроек.НастроитьКомандыПриложения(ЭтотОбъект);

	Возврат ЭтотОбъект;

КонецФункции

// ПолучитьЛог
//	Возвращает лог приложения
// 
// Возвращаемое значение:
//   Лог   - Текущий лог приложения
//
Функция ПолучитьЛог() Экспорт

	Возврат Лог;

КонецФункции

// ЗавершитьРаботуПриложенияСОшибкой
//  Аварийно завершает работу приложения с ошибкой
// 
// Параметры:
//	Сообщение - Строка - Сообщение, которое будет выведено пользователю перед завершением
//  КодВозврата (не обязательный) - Число - Код возврата с которым будет закрыто приложение
//   Значение по умолчанию: "ОшибкаВремениВыполнения" -- 1
//
Процедура ЗавершитьРаботуПриложенияСОшибкой(Знач Сообщение, Знач КодВозврата = Неопределено) Экспорт

	Если КодВозврата = Неопределено Тогда
		КодВозврата = РезультатыКоманд().ОшибкаВремениВыполнения;
	КонецЕсли;

	Лог.КритичнаяОшибка(Сообщение);
	
	ЗавершитьРаботу(КодВозврата);

КонецПроцедуры

// ЗавершитьРаботуПриложения
//  Завершает работу приложения
// 
// Параметры:
//  КодВозврата (не обязательный) - Число - Код возврата с которым будет закрыто приложение
//   Значение по умолчанию: "Успех" -- 0
//
Процедура ЗавершитьРаботуПриложения(Знач КодВозврата = Неопределено) Экспорт
	
	Если КодВозврата = Неопределено Тогда
		КодВозврата = РезультатыКоманд().Успех;
	КонецЕсли;

	ЗавершитьРаботу(КодВозврата);

КонецПроцедуры
	
///////////////////////////////////////////////////////////////////////////////

Функция ЗапуститьВыполнение() Экспорт
	
	Попытка
		ПараметрыЗапуска = ПарсерКоманд.Разобрать(АргументыКоманднойСтроки);
	Исключение
		Лог.Отладка(ОписаниеОшибки());

		Лог.Ошибка("Не удалось определить требуемое действие.");
		ВывестиСправкуПоКомандам();

		Возврат РезультатыКоманд().НеверныеПараметры;
	Конецпопытки;
	
	Команда = "";
	ЗначенияПараметров = Неопределено;
	
	Если ТипЗнч(ПараметрыЗапуска) = Тип("Структура") Тогда
		
		// это команда
		Команда				= ПараметрыЗапуска.Команда;
		ЗначенияПараметров	= ПараметрыЗапуска.ЗначенияПараметров;
		Лог.Отладка("Выполняю команду продукта %1", Команда);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПриложения.ИмяКомандыПоУмолчанию()) Тогда
		
		// это команда по-умолчанию
		Команда				= ПараметрыПриложения.ИмяКомандыПоУмолчанию();
		ЗначенияПараметров	= ПараметрыЗапуска;
		Лог.Отладка("Выполняю команду продукта по умолчанию %1", Команда);
		
	Иначе
		
		ВывестиСправкуПоКомандам();
		
		Возврат РезультатыКоманд().НеверныеПараметры;
		
	КонецЕсли;
	
	Если Команда <> ПараметрыПриложения.ИмяКомандыВерсия() Тогда

		ВывестиВерсию();

	КонецЕсли;
	
	Возврат МенеджерПриложения.ВыполнитьКоманду(Команда, ЗначенияПараметров);
	
КонецФункции // ЗапуститьВыполнение()

///////////////////////////////////////////////////////////////////////////////

Процедура ВывестиВерсию()
	
	Сообщить(СтрШаблон("%1 v%2", ПараметрыПриложения.ИмяПродукта(), ПараметрыПриложения.ВерсияПродукта()));
	
КонецПроцедуры // ВывестиВерсию

///////////////////////////////////////////////////////////////////////////////

Функция ПолучитьКоманду(Знач ИмяКоманды) Экспорт
	
	КлассРеализации = ИсполнителиКоманд[ИмяКоманды];
	Если КлассРеализации = Неопределено Тогда

		ВызватьИсключение СтрШаблон("Неверная операция. Команда '%1' не предусмотрена.", ИмяКоманды);

	КонецЕсли;
	
	Возврат КлассРеализации;
	
КонецФункции // ПолучитьКоманду

Функция ВыполнитьКоманду(Знач ИмяКоманды, Знач ПараметрыКоманды) Экспорт
	
	Команда = ПолучитьКоманду(ИмяКоманды);
	КодВозврата = Команда.ВыполнитьКоманду(ПараметрыКоманды, ДополнительныеПараметры);
	
	Возврат КодВозврата;

КонецФункции // ВыполнитьКоманду

Процедура ВывестиСправкуПоКомандам(ИмяКоманды = Неопределено) Экспорт

	ПарсерКоманд.ВывестиСправкуПоКомандам();
	
КонецПроцедуры // ПоказатьСправкуПоКомандам

Процедура ВывестиСправкуПоКоманде(Знач ИмяКоманды) Экспорт

	ПарсерКоманд.ВывестиСправкуПоКоманде(ИмяКоманды);

КонецПроцедуры

Процедура ДобавитьКоманду(Знач ИмяКоманды, Знач КлассРеализации, Знач ОписаниеКоманды) Экспорт

	РеализацияКоманды = Новый(КлассРеализации);
	
	Команда = ПарсерКоманд.ОписаниеКоманды(ИмяКоманды, ОписаниеКоманды);
	ПарсерКоманд.ДобавитьКоманду(Команда);
	
	РеализацияКоманды.ЗарегистрироватьКоманду(Команда, ПарсерКоманд);

	ИсполнителиКоманд.Вставить(ИмяКоманды, РеализацияКоманды);

КонецПроцедуры

Процедура УстановитьДополнительныйПараметрВыполнения(Знач Параметр, Знач ЗначениеПараметра) Экспорт

	ДополнительныеПараметры.Вставить("Параметр", ЗначениеПараметра);
	
КонецПроцедуры

Процедура УдалитьДополнительныйПараметрВыполнения(Знач Параметр, Знач ЗначениеПараметра) Экспорт

	ДополнительныеПараметры.Удалить("Параметр");
	
КонецПроцедуры
			
///////////////////////////////////////////////////////////////////

Функция РезультатыКоманд() Экспорт

	РезультатыКоманд = Новый Структура;
	РезультатыКоманд.Вставить("Успех", 0);
	РезультатыКоманд.Вставить("НеверныеПараметры", 5);
	РезультатыКоманд.Вставить("ОшибкаВремениВыполнения", 1);
	
	Возврат РезультатыКоманд;

КонецФункции // РезультатыКоманд
